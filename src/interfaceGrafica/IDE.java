/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaceGrafica;

import excecoes.SyntaxError;
import antlr.ErroSintaticoListener;
import antlr.GramaticaSimpleJavaLexer;
import antlr.GramaticaSimpleJavaParser;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.Recognizer;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.tree.ParseTree;
import sistema.ASTJung;
import sistema.Semantica;
import sistema.SimpleJavaVisitor;

/**
 *
 * @author layca
 */
public class IDE extends javax.swing.JFrame {

    /**
     * Creates new form IDE
     */
    private static final long serialVersionUID = 1L;
    private boolean showTree = true;
    public static File arquivoDeEntrada;

    public IDE() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRun = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textEditor = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textSaidaErro = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuArquivo = new javax.swing.JMenu();
        jMenuAbrir = new javax.swing.JMenuItem();
        jMenuSalvar = new javax.swing.JMenuItem();
        jMenuSair = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        textEditor.setColumns(20);
        textEditor.setRows(5);
        jScrollPane1.setViewportView(textEditor);
        TextLineNumbers contadorLinhas = new TextLineNumbers(textEditor);
        jScrollPane1.setRowHeaderView(contadorLinhas);

        textSaidaErro.setColumns(20);
        textSaidaErro.setRows(5);
        jScrollPane2.setViewportView(textSaidaErro);

        jMenuArquivo.setText("Arquivo");

        jMenuAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuAbrir.setText("Abrir");
        jMenuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAbrirActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuAbrir);

        jMenuSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuSalvar.setText("Salvar");
        jMenuSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSalvarActionPerformed(evt);
            }
        });
        jMenuArquivo.add(jMenuSalvar);

        jMenuSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMenuSair.setText("Sair");
        jMenuArquivo.add(jMenuSair);

        jMenuBar1.add(jMenuArquivo);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRun)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnRun)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
//        textSaidaErro.setText("");
//        ANTLRInputStream antlrInput = new ANTLRInputStream(textEdit.getText());
//        GramaticaSimpleJavaLexer lexer = new GramaticaSimpleJavaLexer(antlrInput);
//        CommonTokenStream tokens = new CommonTokenStream(lexer);
//        GramaticaSimpleJavaParser parser = new GramaticaSimpleJavaParser(tokens);
//        parser.removeErrorListeners();
//        ErroSintaticoListener errorCollector = new ErroSintaticoListener();
//        parser.addErrorListener(errorCollector);
//        System.out.println(errorCollector.getErrors().size());
//
//        ParseTree tree = parser.prog();
//
//        SimpleJavaVisitor loader = new SimpleJavaVisitor();
//        loader.visit(tree);
//
//        try {
//            new Semantica(loader.getAST());
//        } catch (Exception e) {
//            textSaidaErro.append("Erro " + " : " + e.getMessage() + "\n");
//            //e.printStackTrace();
//        }
//        Highlighter highlighter = textEdit.getHighlighter();
//
//        HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.pink);
//        highlighter.removeAllHighlights();
//
//        if (errorCollector.getErrors().size() > 0) {
//            textSaidaErro.append("Atenção: ERRO\n");
//            for (int i = 0; i < errorCollector.getErrors().size(); i++) {
//                SyntaxError e = errorCollector.getErrors().get(i);
//                // RecognitionExceptionUtil is my custom class discussed next.
//                System.out.println("######################");
//                int start = e.getOffendingToken().getStartIndex();
//                int stop = e.getOffendingToken().getStopIndex() + 1;
//                String input = e.getOffendingToken().getTokenSource().getInputStream().toString();
//
//                int p0 = textEdit.getText().indexOf(input);
//                int p1 = p0 + input.length();
//
//                textSaidaErro.append("Erro " + (i + 1) + ": Linha " + e.getLine() + " : " + e.getMessage() + "\n");
//            }
//        } else {
//            textSaidaErro.append("Sucesso na Compilação\n");
//        }

        textSaidaErro.setText("");
        textSaidaErro.setBackground(Color.yellow);
        showTree = true;
        ANTLRInputStream antlrInput = new ANTLRInputStream(textEditor.getText());
        GramaticaSimpleJavaLexer lexer = new GramaticaSimpleJavaLexer(antlrInput);
        //lexer.removeErrorListeners();
        //lexer.addErrorListener(ErroSintaticoListener.INSTANCE);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        GramaticaSimpleJavaParser parser = new GramaticaSimpleJavaParser(tokens);
        parser.removeErrorListeners();
        ErroSintaticoListener errorCollector = new ErroSintaticoListener();
        parser.addErrorListener(errorCollector);
        System.out.println(errorCollector.getErrors().size());

        //textEditor.append("COCOZINHO");
        ParseTree tree = parser.prog();

        SimpleJavaVisitor loader = new SimpleJavaVisitor();
        loader.visit(tree);
        try {
            new Semantica(loader.getAST());
        } catch (Exception e) {
            // TODO Auto-generated catch block
            showTree = false;
            textSaidaErro.append("Erro " + " : " + e.getMessage() + "\n");
            //e.printStackTrace();
        }
        Highlighter highlighter = textEditor.getHighlighter();

        HighlightPainter painter
                = new DefaultHighlighter.DefaultHighlightPainter(Color.pink);
        highlighter.removeAllHighlights();
        if (errorCollector.getErrors().size() > 0) {
            showTree = false;

            for (int i = 0; i < errorCollector.getErrors().size(); i++) {
                SyntaxError e = errorCollector.getErrors().get(i);
                highlighter = textEditor.getHighlighter();
                // RecognitionExceptionUtil is my custom class discussed next.
//                System.out.println("######################");
                /*textEditor =  underlineError(e.getRecognizer(),
                 e.getOffendingToken(), e.getLine(),
                 e.getCharPositionInLine(), textEditor);*/
                int start = e.getOffendingToken().getStartIndex();
                int stop = e.getOffendingToken().getStopIndex() + 1;
                String input = e.getOffendingToken().getTokenSource().getInputStream().toString();

                int p0 = textEditor.getText().indexOf(input);
                int p1 = p0 + input.length();
                try {
                    highlighter.addHighlight(start, stop, painter);
                } catch (BadLocationException e1) {
                    // TODO Auto-generated catch block
//                    System.out.println("######################BADDDDD");
                    e1.printStackTrace();
                }
                textSaidaErro.append("Erro " + (i + 1) + ": Linha " + e.getLine() + " : " + e.getMessage() + "\n");

                //contentPane.add(textError, BorderLayout.EAST );
                //contentPane.setBackground(Color.red);
                //panelSaida.add(textSaidaErro, BorderLayout.SOUTH );
                textSaidaErro.setBackground(Color.red);

                //.err.println("ENTROU");
                //textEditor.setHighlighter(highlighter);
                //textEditor.append("coco");
            }
            //panel.add(scrollPaneE);
            //scrollPaneE.setViewportView(textError);

        }else{
            textSaidaErro.setBackground(Color.green);
            textSaidaErro.append("Sucesso na Compilação\n");
        }
        
//        if (showTree) {
//            ASTJung astJung = new ASTJung(loader.getAST());
//            astJung.mostrarASTJung();
//        }

    }//GEN-LAST:event_btnRunActionPerformed

    private void jMenuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAbrirActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(".\\arquivosTeste"));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.txt", "txt", "text");
        chooser.setFileFilter(filter);
        chooser.showOpenDialog(null);
        arquivoDeEntrada = chooser.getSelectedFile();
        try {
            textEditor.setText("");
            BufferedReader bufferEntrada = new BufferedReader(new FileReader(arquivoDeEntrada));
            String linhaLida;
            while ((linhaLida = bufferEntrada.readLine()) != null) {
                textEditor.append(linhaLida + "\n");
            }
            bufferEntrada.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenuAbrirActionPerformed

    private void jMenuSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSalvarActionPerformed
        System.out.println("Salvando arquivo");
        BufferedWriter writer = null;
        if (IDE.arquivoDeEntrada == null) {
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new File(".\\arquivosTeste"));
            int retorno = chooser.showSaveDialog(null);
            if (retorno == JFileChooser.APPROVE_OPTION) {
                try {
                    IDE.arquivoDeEntrada = new File(chooser.getSelectedFile() + ".txt");
                    writer = new BufferedWriter(new FileWriter(IDE.arquivoDeEntrada));
                    writer.write(textEditor.getText().replace("\\n", "\n"));
                } catch (Exception ex) {
                    ex.printStackTrace();
                } finally {
                    try {
                        writer.close();
                    } catch (IOException e1) {
                        e1.printStackTrace();
                    }
                }
            }
        } else {
            try {
                writer = new BufferedWriter(new FileWriter(IDE.arquivoDeEntrada));
                writer.write(textEditor.getText().replace("\\n", "\n"));
            } catch (IOException e1) {
                e1.printStackTrace();
            } finally {
                try {
                    writer.close();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            }

        }
    }//GEN-LAST:event_jMenuSalvarActionPerformed

    protected JTextArea underlineError(Recognizer<?, ?> recognizer,
            Token offendingToken, int line,
            int charPositionInLine, JTextArea text) {
        CommonTokenStream tokens
                = (CommonTokenStream) recognizer.getInputStream();
        String input = tokens.getTokenSource().getInputStream().toString();
        String[] lines = input.split("\n");
        String errorLine = lines[line - 1];
        textSaidaErro.setText(errorLine);
        for (int i = 0; i < charPositionInLine; i++) {
            System.err.print(" ");
        }
        int start = offendingToken.getStartIndex();
        int stop = offendingToken.getStopIndex();
        if (start >= 0 && stop >= 0) {
            for (int i = start; i <= stop; i++) {
                System.err.print("^");
            }
        }
        Highlighter highlighter = text.getHighlighter();
        HighlightPainter painter
                = new DefaultHighlighter.DefaultHighlightPainter(Color.pink);
        int p0 = text.getText().indexOf(input);
        int p1 = p0 + input.length();
        try {
            highlighter.addHighlight(0, 3, painter);
        } catch (BadLocationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        System.err.println("ENTROU");
        text.setHighlighter(highlighter);
        text.append("uiiuiuiui");
        return text;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnRun;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuAbrir;
    private javax.swing.JMenu jMenuArquivo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuSair;
    private javax.swing.JMenuItem jMenuSalvar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea textEditor;
    private javax.swing.JTextArea textSaidaErro;
    // End of variables declaration//GEN-END:variables
}
